name: CI tests

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    # Shared environment for caching/ccache settings to speed repeated builds
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CMAKE_PRESET: ci-release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang, msvc]
        exclude:
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Cache ccache (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Configure ccache (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          # Ensure ccache dir exists and set a reasonable max size to improve cache hits
          mkdir -p "${CCACHE_DIR}"
          chmod 700 "${CCACHE_DIR}"
          # Enable ccache's preprocessed output mode which improves cache-hit reliability for clang
          export CCACHE_CPP2=1
          # Set max size for ccache to persist across runs (best-effort)
          if command -v ccache >/dev/null 2>&1; then
            ccache --max-size=5G || ccache -M 5G || true
            ccache -s || true
          fi

      - name: Cache vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          # Cache the full vcpkg tree (including bootstrap/build artifacts) to speed subsequent runs
          path: |
            C:\vcpkg
            C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -euo pipefail
          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
            ninja-build ccache build-essential cmake pkg-config \
            clang lld \
            libhdf5-dev libwayland-dev wayland-protocols libxkbcommon-dev libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libboost-all-dev libomp-dev libfftw3-dev libjpeg-dev libpng-dev libfreetype6-dev libharfbuzz-dev libicu-dev zlib1g-dev libbz2-dev liblzma-dev
          # Ensure ccache directory exists and has correct permissions
          mkdir -p ~/.ccache
          chmod 700 ~/.ccache
          # Ensure ccache max size is configured early
          if command -v ccache >/dev/null 2>&1; then
            ccache --max-size=5G || true
          fi

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          set -euo pipefail
          brew update --quiet
          # Install llvm (provides clang/lld) to improve clang builds; llvm install can be large but speeds linking with lld
          brew install hdf5 ninja ccache llvm || true
          # Ensure ccache path
          mkdir -p ~/.ccache
          if command -v ccache >/dev/null 2>&1; then
            ccache --max-size=5G || true
          fi

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path C:\vcpkg)) {
            git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
            & C:\vcpkg\bootstrap-vcpkg.bat
          }
          C:\vcpkg\vcpkg.exe install hdf5[cpp]:x64-windows
          # keep installed packages cached by the actions/cache step

      - name: Configure (Unix)
        if: matrix.compiler == 'gcc' || matrix.compiler == 'clang'
        run: |
          set -euo pipefail
          mkdir -p build

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            cmake --preset ${{ env.CMAKE_PRESET }} -S . -B build -DCMAKE_CXX_FLAGS="-w"
          else
            export CCACHE_CPP2=1
            cmake --preset ${{ env.CMAKE_PRESET }} -S . -B build -DCMAKE_CXX_FLAGS="-w"
          fi

      - name: Configure (MSVC)
        if: matrix.compiler == 'msvc'
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          mkdir -Force build
          cmake --preset ${{ env.CMAKE_PRESET }} -S . -B build --log-level=VERBOSE -DCMAKE_CXX_FLAGS="/w"

      - name: Build
        shell: bash
        run: |
          set -euo pipefail
          cmake --build build --preset ${{ env.CMAKE_PRESET }}-build

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.compiler }}
          path: build
          retention-days: 7

      - name: Run Tests
        shell: bash
        run: |
          set -euo pipefail
          cd build/${{ env.CMAKE_PRESET }}
          # Prefer ctest for parallel test execution if available
          if command -v ctest >/dev/null 2>&1; then
            if [ "$RUNNER_OS" = "Windows" ]; then
              ctest -C Release --output-on-failure
            else
              NPROC=$(nproc 2>/dev/null || sysctl -n hw.ncpu)
              ctest --output-on-failure -j$(( NPROC > 2 ? NPROC : 2 ))
            fi
          else
            # Fallback to direct binary execution
            if [ "$RUNNER_OS" = "Windows" ]; then
              ./bin/Release/velm_tests.exe
            else
              ./bin/velm_tests
            fi
          fi

      - name: Upload test artifacts and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            build/${{ env.CMAKE_PRESET }}/Testing
            build/${{ env.CMAKE_PRESET }}/test-*.log
            build/${{ env.CMAKE_PRESET }}/Testing/**/*
          retention-days: 7
